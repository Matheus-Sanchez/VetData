#!/usr/bin/env python3
"""
Sistema Principal de Scraping de Medicamentos Veterin√°rios
Vers√£o refatorada com conex√µes h√≠bridas (Requests + Selenium)

Interface de linha de comando para execu√ß√£o do scraper
"""

import sys
import logging
from gerenciador_principal import GerenciadorScrapingMedicamentos

def exibir_cabecalho():
    """Exibe cabe√ßalho do programa"""
    print("\n" + "="*70)
    print("SCRAPER DE MEDICAMENTOS VETERIN√ÅRIOS - VERS√ÉO H√çBRIDA")
    print("="*70)
    print("\nEste sistema coleta pre√ßos de medicamentos veterin√°rios dos")
    print("principais pet shops online do Brasil usando conex√£o inteligente:")
    print("‚Ä¢ Tenta REQUESTS primeiro (mais r√°pido)")
    print("‚Ä¢ USA SELENIUM como fallback (quando necess√°rio)")
    print("\nSites suportados:")
    print("‚Ä¢ Cobasi (cobasi.com.br)")
    print("‚Ä¢ Petlove (petlove.com.br)")  
    print("‚Ä¢ Petz (petz.com.br)")

def exibir_opcoes_execucao():
    """Exibe op√ß√µes de execu√ß√£o dispon√≠veis"""
    print("\n" + "-"*50)
    print("MODOS DE EXECU√á√ÉO DISPON√çVEIS:")
    print("-"*50)
    print("1. MODO TESTE")
    print("   ‚Ä¢ Coleta apenas 1 produto por medicamento")
    print("   ‚Ä¢ Execu√ß√£o mais r√°pida para verifica√ß√µes")
    print("   ‚Ä¢ Ideal para testar funcionamento")
    print("   ‚Ä¢ Logs otimizados para terminal")
    
    print("\n2. MODO COMPLETO")
    print("   ‚Ä¢ Coleta todos os produtos encontrados")
    print("   ‚Ä¢ Processo completo e detalhado")
    print("   ‚Ä¢ Recomendado para coleta real de dados")
    print("   ‚Ä¢ Gera relat√≥rio consolidado")
    
    print("\n3. SITE ESPEC√çFICO")
    print("   ‚Ä¢ Executa scraping em apenas um site")
    print("   ‚Ä¢ √ötil para testes direcionados")
    print("   ‚Ä¢ Permite focar em site problem√°tico")

def obter_escolha_usuario():
    """
    Obt√©m escolha do usu√°rio com valida√ß√£o
    
    Returns:
        str: Op√ß√£o escolhida pelo usu√°rio
    """
    while True:
        try:
            escolha = input("\nDigite sua escolha (1, 2 ou 3): ").strip()
            if escolha in ['1', '2', '3']:
                return escolha
            else:
                print("Escolha inv√°lida. Digite 1, 2 ou 3.")
        except KeyboardInterrupt:
            print("\n\nExecu√ß√£o cancelada pelo usu√°rio.")
            sys.exit(0)
        except Exception:
            print("Erro ao ler entrada. Tente novamente.")

def obter_site_especifico(sites_disponiveis):
    """
    Obt√©m nome do site espec√≠fico do usu√°rio
    
    Args:
        sites_disponiveis: Lista de sites dispon√≠veis
        
    Returns:
        str: Nome do site escolhido
    """
    print("\n" + "-"*30)
    print("SITES DISPON√çVEIS:")
    print("-"*30)
    for site in sites_disponiveis:
        print(f"‚Ä¢ {site}")

    while True:
        try:
            site_escolhido = input("\nDigite o nome do site: ").strip()
            
            # Buscar site (case-insensitive)
            for site in sites_disponiveis:
                if site.lower() == site_escolhido.lower():
                    return site
            
            print(f"Site '{site_escolhido}' n√£o encontrado.")
            print(f"Sites dispon√≠veis: {', '.join(sites_disponiveis)}")
            
        except KeyboardInterrupt:
            print("\n\nExecu√ß√£o cancelada pelo usu√°rio.")
            sys.exit(0)
        except Exception:
            print("Erro ao ler entrada. Tente novamente.")

def executar_modo_teste():
    """Executa sistema em modo teste"""
    print("\n" + "="*50)
    print("MODO TESTE SELECIONADO")
    print("="*50)
    print("‚Ä¢ Coletando apenas 1 produto por medicamento")
    print("‚Ä¢ Processo otimizado para verifica√ß√£o r√°pida")
    print("‚Ä¢ Arquivos salvos na pasta 'dados_testes'")
    
    try:
        gerenciador = GerenciadorScrapingMedicamentos(modo_teste=True)
        
        # Validar sistema antes de executar
        status = gerenciador.validar_sistema()
        print(f"\nSistema validado: {len([s for s in status['scrapers'] if s['ativo']])} scrapers ativos")
        
        print("\nIniciando execu√ß√£o...")
        gerenciador.executar_todos_scrapers()
        
        print("\n‚úÖ MODO TESTE CONCLU√çDO!")
        print("üìÅ Verifique os arquivos na pasta 'dados_testes/'")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("üìã Verifique os logs para mais detalhes")

def executar_modo_completo():
    """Executa sistema em modo completo"""
    print("\n" + "="*50)
    print("MODO COMPLETO SELECIONADO")
    print("="*50)
    print("‚Ä¢ Coletando todos os produtos encontrados")
    print("‚Ä¢ Processo completo pode demorar v√°rios minutos")
    print("‚Ä¢ Arquivos salvos na pasta 'dados_coletados'")
    print("‚Ä¢ Relat√≥rio consolidado ser√° gerado")
    
    try:
        gerenciador = GerenciadorScrapingMedicamentos(modo_teste=False)
        
        # Mostrar estat√≠sticas dos medicamentos
        # stats_medicamentos = gerenciador.obter_estatisticas_medicamentos()
        # total_medicamentos = sum(info['quantidade'] for info in stats_medicamentos.values())
        # print(f"\nüìä {total_medicamentos} medicamentos cadastrados em {len(stats_medicamentos)} categorias")
        
        print("\nIniciando execu√ß√£o completa...")
        gerenciador.executar_todos_scrapers()
        
        print("\n‚úÖ MODO COMPLETO CONCLU√çDO!")
        print("üìÅ Verifique os arquivos na pasta 'dados_coletados/'")
        print("üìã Relat√≥rio consolidado dispon√≠vel")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("üìã Verifique os logs para mais detalhes")

def executar_site_especifico():
    """Executa scraping de site espec√≠fico"""
    print("\n" + "="*50)
    print("MODO SITE ESPEC√çFICO SELECIONADO")
    print("="*50)
    
    try:
        # Criar gerenciador tempor√°rio para obter lista de sites
        gerenciador_temp = GerenciadorScrapingMedicamentos(modo_teste=False)
        sites_disponiveis = gerenciador_temp.obter_lista_sites_disponiveis()
        
        # Obter site escolhido
        site_escolhido = obter_site_especifico(sites_disponiveis)
        
        print(f"\nüéØ Executando scraping espec√≠fico para {site_escolhido}")
        print("‚Ä¢ Todos os medicamentos ser√£o processados")
        print("‚Ä¢ Arquivo individual ser√° gerado")
        
        # Executar scraping espec√≠fico
        gerenciador = GerenciadorScrapingMedicamentos(modo_teste=False)
        gerenciador.executar_site_especifico(site_escolhido)
        
        print(f"\n‚úÖ SCRAPING DE {site_escolhido.upper()} CONCLU√çDO!")
        print("üìÅ Arquivo salvo na pasta 'dados_coletados/'")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("üìã Verifique os logs para mais detalhes")

def main():
    """Fun√ß√£o principal do programa"""
    try:
        # Exibir interface
        exibir_cabecalho()
        exibir_opcoes_execucao()
        
        # Obter escolha do usu√°rio
        escolha = obter_escolha_usuario()
        
        # Executar baseado na escolha
        if escolha == "1":
            executar_modo_teste()
        elif escolha == "2":
            executar_modo_completo()
        elif escolha == "3":
            executar_site_especifico()
        
        # Mensagem final
        print("\n" + "="*50)
        print("EXECU√á√ÉO FINALIZADA")
        print("="*50)
        print("üìä Dados coletados e organizados em planilhas Excel")
        print("üîç Logs detalhados salvos na pasta 'logs/'")
        print("üìà Use os dados para an√°lise de pre√ßos e mercado")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
        print("üìã Dados parciais podem ter sido salvos")
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico: {e}")
        print("üìã Verifique as depend√™ncias e tente novamente")
    
    # Aguardar antes de fechar (opcional)
    # try:
    #     input("\nPressione Enter para sair...")
    # except:
    #     pass

if __name__ == "__main__":
    main()